// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  company: (where?: CompanyWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  company: (where: CompanyWhereUniqueInput) => CompanyNullablePromise;
  companies: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Company>;
  companiesConnection: (args?: {
    where?: CompanyWhereInput;
    orderBy?: CompanyOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CompanyConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCompany: (data: CompanyCreateInput) => CompanyPromise;
  updateCompany: (args: {
    data: CompanyUpdateInput;
    where: CompanyWhereUniqueInput;
  }) => CompanyPromise;
  updateManyCompanies: (args: {
    data: CompanyUpdateManyMutationInput;
    where?: CompanyWhereInput;
  }) => BatchPayloadPromise;
  upsertCompany: (args: {
    where: CompanyWhereUniqueInput;
    create: CompanyCreateInput;
    update: CompanyUpdateInput;
  }) => CompanyPromise;
  deleteCompany: (where: CompanyWhereUniqueInput) => CompanyPromise;
  deleteManyCompanies: (where?: CompanyWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  company: (
    where?: CompanySubscriptionWhereInput
  ) => CompanySubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CompanyOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "ticker_ASC"
  | "ticker_DESC"
  | "marketCap_ASC"
  | "marketCap_DESC"
  | "enterpriseVal_ASC"
  | "enterpriseVal_DESC"
  | "trailingPE_ASC"
  | "trailingPE_DESC"
  | "forwardPE_ASC"
  | "forwardPE_DESC"
  | "pegRatio_ASC"
  | "pegRatio_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type CompanyWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  ticker?: Maybe<String>;
}>;

export interface CompanyWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  ticker?: Maybe<String>;
  ticker_not?: Maybe<String>;
  ticker_in?: Maybe<String[] | String>;
  ticker_not_in?: Maybe<String[] | String>;
  ticker_lt?: Maybe<String>;
  ticker_lte?: Maybe<String>;
  ticker_gt?: Maybe<String>;
  ticker_gte?: Maybe<String>;
  ticker_contains?: Maybe<String>;
  ticker_not_contains?: Maybe<String>;
  ticker_starts_with?: Maybe<String>;
  ticker_not_starts_with?: Maybe<String>;
  ticker_ends_with?: Maybe<String>;
  ticker_not_ends_with?: Maybe<String>;
  marketCap?: Maybe<String>;
  marketCap_not?: Maybe<String>;
  marketCap_in?: Maybe<String[] | String>;
  marketCap_not_in?: Maybe<String[] | String>;
  marketCap_lt?: Maybe<String>;
  marketCap_lte?: Maybe<String>;
  marketCap_gt?: Maybe<String>;
  marketCap_gte?: Maybe<String>;
  marketCap_contains?: Maybe<String>;
  marketCap_not_contains?: Maybe<String>;
  marketCap_starts_with?: Maybe<String>;
  marketCap_not_starts_with?: Maybe<String>;
  marketCap_ends_with?: Maybe<String>;
  marketCap_not_ends_with?: Maybe<String>;
  enterpriseVal?: Maybe<String>;
  enterpriseVal_not?: Maybe<String>;
  enterpriseVal_in?: Maybe<String[] | String>;
  enterpriseVal_not_in?: Maybe<String[] | String>;
  enterpriseVal_lt?: Maybe<String>;
  enterpriseVal_lte?: Maybe<String>;
  enterpriseVal_gt?: Maybe<String>;
  enterpriseVal_gte?: Maybe<String>;
  enterpriseVal_contains?: Maybe<String>;
  enterpriseVal_not_contains?: Maybe<String>;
  enterpriseVal_starts_with?: Maybe<String>;
  enterpriseVal_not_starts_with?: Maybe<String>;
  enterpriseVal_ends_with?: Maybe<String>;
  enterpriseVal_not_ends_with?: Maybe<String>;
  trailingPE?: Maybe<String>;
  trailingPE_not?: Maybe<String>;
  trailingPE_in?: Maybe<String[] | String>;
  trailingPE_not_in?: Maybe<String[] | String>;
  trailingPE_lt?: Maybe<String>;
  trailingPE_lte?: Maybe<String>;
  trailingPE_gt?: Maybe<String>;
  trailingPE_gte?: Maybe<String>;
  trailingPE_contains?: Maybe<String>;
  trailingPE_not_contains?: Maybe<String>;
  trailingPE_starts_with?: Maybe<String>;
  trailingPE_not_starts_with?: Maybe<String>;
  trailingPE_ends_with?: Maybe<String>;
  trailingPE_not_ends_with?: Maybe<String>;
  forwardPE?: Maybe<String>;
  forwardPE_not?: Maybe<String>;
  forwardPE_in?: Maybe<String[] | String>;
  forwardPE_not_in?: Maybe<String[] | String>;
  forwardPE_lt?: Maybe<String>;
  forwardPE_lte?: Maybe<String>;
  forwardPE_gt?: Maybe<String>;
  forwardPE_gte?: Maybe<String>;
  forwardPE_contains?: Maybe<String>;
  forwardPE_not_contains?: Maybe<String>;
  forwardPE_starts_with?: Maybe<String>;
  forwardPE_not_starts_with?: Maybe<String>;
  forwardPE_ends_with?: Maybe<String>;
  forwardPE_not_ends_with?: Maybe<String>;
  pegRatio?: Maybe<String>;
  pegRatio_not?: Maybe<String>;
  pegRatio_in?: Maybe<String[] | String>;
  pegRatio_not_in?: Maybe<String[] | String>;
  pegRatio_lt?: Maybe<String>;
  pegRatio_lte?: Maybe<String>;
  pegRatio_gt?: Maybe<String>;
  pegRatio_gte?: Maybe<String>;
  pegRatio_contains?: Maybe<String>;
  pegRatio_not_contains?: Maybe<String>;
  pegRatio_starts_with?: Maybe<String>;
  pegRatio_not_starts_with?: Maybe<String>;
  pegRatio_ends_with?: Maybe<String>;
  pegRatio_not_ends_with?: Maybe<String>;
  AND?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  OR?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
  NOT?: Maybe<CompanyWhereInput[] | CompanyWhereInput>;
}

export interface CompanyCreateInput {
  id?: Maybe<ID_Input>;
  ticker: String;
  marketCap: String;
  enterpriseVal: String;
  trailingPE: String;
  forwardPE: String;
  pegRatio: String;
}

export interface CompanyUpdateInput {
  ticker?: Maybe<String>;
  marketCap?: Maybe<String>;
  enterpriseVal?: Maybe<String>;
  trailingPE?: Maybe<String>;
  forwardPE?: Maybe<String>;
  pegRatio?: Maybe<String>;
}

export interface CompanyUpdateManyMutationInput {
  ticker?: Maybe<String>;
  marketCap?: Maybe<String>;
  enterpriseVal?: Maybe<String>;
  trailingPE?: Maybe<String>;
  forwardPE?: Maybe<String>;
  pegRatio?: Maybe<String>;
}

export interface CompanySubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CompanyWhereInput>;
  AND?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  OR?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
  NOT?: Maybe<CompanySubscriptionWhereInput[] | CompanySubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Company {
  id: ID_Output;
  createdAt: DateTimeOutput;
  ticker: String;
  marketCap: String;
  enterpriseVal: String;
  trailingPE: String;
  forwardPE: String;
  pegRatio: String;
}

export interface CompanyPromise extends Promise<Company>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  ticker: () => Promise<String>;
  marketCap: () => Promise<String>;
  enterpriseVal: () => Promise<String>;
  trailingPE: () => Promise<String>;
  forwardPE: () => Promise<String>;
  pegRatio: () => Promise<String>;
}

export interface CompanySubscription
  extends Promise<AsyncIterator<Company>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ticker: () => Promise<AsyncIterator<String>>;
  marketCap: () => Promise<AsyncIterator<String>>;
  enterpriseVal: () => Promise<AsyncIterator<String>>;
  trailingPE: () => Promise<AsyncIterator<String>>;
  forwardPE: () => Promise<AsyncIterator<String>>;
  pegRatio: () => Promise<AsyncIterator<String>>;
}

export interface CompanyNullablePromise
  extends Promise<Company | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  ticker: () => Promise<String>;
  marketCap: () => Promise<String>;
  enterpriseVal: () => Promise<String>;
  trailingPE: () => Promise<String>;
  forwardPE: () => Promise<String>;
  pegRatio: () => Promise<String>;
}

export interface CompanyConnection {
  pageInfo: PageInfo;
  edges: CompanyEdge[];
}

export interface CompanyConnectionPromise
  extends Promise<CompanyConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CompanyEdge>>() => T;
  aggregate: <T = AggregateCompanyPromise>() => T;
}

export interface CompanyConnectionSubscription
  extends Promise<AsyncIterator<CompanyConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CompanyEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCompanySubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface CompanyEdge {
  node: Company;
  cursor: String;
}

export interface CompanyEdgePromise extends Promise<CompanyEdge>, Fragmentable {
  node: <T = CompanyPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CompanyEdgeSubscription
  extends Promise<AsyncIterator<CompanyEdge>>,
    Fragmentable {
  node: <T = CompanySubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCompany {
  count: Int;
}

export interface AggregateCompanyPromise
  extends Promise<AggregateCompany>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCompanySubscription
  extends Promise<AsyncIterator<AggregateCompany>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface CompanySubscriptionPayload {
  mutation: MutationType;
  node: Company;
  updatedFields: String[];
  previousValues: CompanyPreviousValues;
}

export interface CompanySubscriptionPayloadPromise
  extends Promise<CompanySubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CompanyPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CompanyPreviousValuesPromise>() => T;
}

export interface CompanySubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CompanySubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CompanySubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CompanyPreviousValuesSubscription>() => T;
}

export interface CompanyPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  ticker: String;
  marketCap: String;
  enterpriseVal: String;
  trailingPE: String;
  forwardPE: String;
  pegRatio: String;
}

export interface CompanyPreviousValuesPromise
  extends Promise<CompanyPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  ticker: () => Promise<String>;
  marketCap: () => Promise<String>;
  enterpriseVal: () => Promise<String>;
  trailingPE: () => Promise<String>;
  forwardPE: () => Promise<String>;
  pegRatio: () => Promise<String>;
}

export interface CompanyPreviousValuesSubscription
  extends Promise<AsyncIterator<CompanyPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  ticker: () => Promise<AsyncIterator<String>>;
  marketCap: () => Promise<AsyncIterator<String>>;
  enterpriseVal: () => Promise<AsyncIterator<String>>;
  trailingPE: () => Promise<AsyncIterator<String>>;
  forwardPE: () => Promise<AsyncIterator<String>>;
  pegRatio: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Company",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
